const fsP = require('fs/promises');
const { serverLog } = require('../../utils/helpers');

// On DELETE
// When the resource gets deleted and has an image (user with photo), remove the photo
exports.removeImage = async function (path, filename) {
  try {
    if (filename.endsWith('.png')) await fsP.rm(`${path}${filename}`);
    else serverLog('File could not be removed on path: ', `${path}${filename}`);
  } catch {
    serverLog('File error during removal.', `${path}${filename}`);
  }
};

// On UPDATE
// Rename image(s) when the resource (user, project...) has images already - use by update
// "from" is the files object generated by multer.
// "to" is an object with fieldname and the new filename { fieldname: filename }
exports.updateImages = async function (from, to) {
  Object.keys(to).forEach(async (key) => {
    if (!from[key]) return;

    const source = `${from[key][0].path}${from[key][0].filename}`;
    const destination = `${from[key][0].path}${to[key]}`;

    // copy (overwrite when exists), then remove the source file
    await fsP.copyFile(source, destination);
    fsP.rm(source, {
      force: true,
      maxRetries: 2,
      retryDelay: 100,
      recursive: true,
    });
  });
};

//On ERROR or something unexpected
exports.clearImages = function (files) {
  if (!files) return;
  // the rm is a promise based method, and it gets not awaited on purpose - its not get throw an error, because of force option. Remove the files in background.
  Object.keys(files).forEach((key) => {
    files[key].forEach((fileObj) => {
      fsP.rm(`${fileObj.path}${fileObj.filename}`, {
        force: true,
        maxRetries: 2,
        retryDelay: 100,
        recursive: true,
      });
    });
  });
};
